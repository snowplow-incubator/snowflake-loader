{
  "input": {
    # -- kinesis stream for the source of enriched events
    "streamName": "snowplow-enriched-events"

    # -- name to use for the KCL dynamodb table
    "appName": "snowplow-snowflake-loader"

    # -- TODO explain the options
    "initialPosition": {
      "type": "TRIM_HORIZON"
    }

    # -- TODO explain the options
    "retrievalMode": {
      "type": "Polling"
      "maxRecords": 1000
    }

    # -- TODO explain what this is
    "bufferSize": 3

  }

  "output": {

    "good": {
      # -- uri of the snowflake account
      "url": "https://orgname.accountname.snowflakecomputing.com"

      # -- snowflake user who has necessary privileges
      "user": "snowplow"

      # -- snowflake private key, used to connect to the account
      "privateKey": ${SNOWFLAKE_PRIVATE_KEY}

      # -- optional, passphrase for the private key
      "privateKeyPassphrase": ${?SNOWFLAKE_PRIVATE_KEY_PASSPHRASE}

      # -- optional, snowflake role which the snowflake user should assume
      "role": "snowplow_loader"

      # -- name of the snowflake database containing the events table
      "database": "snowplow"

      # -- name of the snowflake schema containing the events table
      "schema": "atomic"

      # -- name to use for the events table.
      "table": "events"

      # -- name to use for the snowflake channel.
      "channel": "snowplow"

      # -- Timeouts used for JDBC operations
      "jdbcLoginTimeout": "60 seconds"
      "jdbcNetworkTimeout": "60 seconds"
      "jdbcQueryTimeout": "60 seconds"
    }

    "bad": null # TODO need kinesis sink for failed events

  }

  "batching": {

    # - Events are emitted to Snowflake when the batch reaches this size in bytes
    "maxBytes": 16000000

    # - Events are emitted to Snowflake for a maximum of this duration, even if the `maxBytes` size has not been reached
    "maxDelay": "1 second"

    # - How many batches can we send simultaneously over the network to Snowflake.
    # - The Snowflake SDK dictates this should be kept below the number of available runtime processors (cpu)
    "uploadConcurrency":  1
  }

  "batching": {

    # - Events are emitted to Snowflake when the batch reaches this size in bytes
    "maxBytes": 16000000

    # - Events are emitted to Snowflake for a maximum of this duration, even if the `maxBytes` size has not been reached
    "maxDelay": "1 second"

    # - How many batches can we send simultaneously over the network to Snowflake.
    # - The Snowflake SDK dictates this should be kept below the number of available runtime processors (cpu)
    "uploadConcurrency":  1
  }

  "monitoring": {
    "metrics": {

      # -- Send runtime metrics to a statsd server
      "statsd": {
        "hostname": "127.0.0.1"
        "port": 8125

        # -- Map of key/value pairs to be send along with the metric
        "tags": {
          "myTag": "xyz"
        }

        # -- How often to report metrics
        "period": "1 minute"

        # -- Prefix used for the metric name when sending to statsd
        "prefix": "snowplow.lakeloader"
      }
    }

    # -- Report unexpected runtime exceptions to Sentry
    "sentry": {
      "dsn": "https://public@sentry.example.com/1"

      # -- Map of key/value pairs to be included as tags
      "tags": {
        "myTag": "xyz"
      }
    }
  }

  # -- Optional, configure telemetry
  # -- All the fields are optional
  "telemetry": {

    # -- Set to true to disable telemetry
    "disable": false

    # -- Interval for the heartbeat event
    "interval": 15 minutes

    # -- HTTP method used to send the heartbeat event
    "method": POST

    # -- URI of the collector receiving the heartbeat event
    "collectorUri": collector-g.snowplowanalytics.com

    # -- Port of the collector receiving the heartbeat event
    "collectorPort": 443

    # -- Whether to use https or not
    "secure": true

    # -- Identifier intended to tie events together across modules,
    # -- infrastructure and apps when used consistently
    "userProvidedId": my_pipeline

    # -- ID automatically generated upon running a modules deployment script
    # -- Intended to identify each independent module, and the infrastructure it controls
    "autoGeneratedId": hfy67e5ydhtrd

    # -- Unique identifier for the VM instance
    # -- Unique for each instance of the app running within a module
    "instanceId": 665bhft5u6udjf

    # -- Name of the terraform module that deployed the app
    "moduleName": snowflake-loader-vmss

    # -- Version of the terraform module that deployed the app
    "moduleVersion": 1.0.0
  }
}
